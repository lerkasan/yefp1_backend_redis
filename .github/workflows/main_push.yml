name: CI/CD for Backend Redis

on:
  push:
    branches:
      - main
  
  # for debugging purposes
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }} 
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
  DEPLOYMENT_GROUP: ${{ vars.DEPLOYMENT_GROUP }}
  HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
  TRIVY_DB_REPO: 'public.ecr.aws/aquasecurity/trivy-db:2'

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   #v4.2.2

      - name: Check for commited secrets using GitLeaks
        uses: gitleaks/gitleaks-action@83373cf2f8c4db6e24b41c1a9b086bb9619e9cd3   #v2.3.7

      - name: Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b   #v5.3.0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install pylint ruff flake8

      - name: Run Ruff formatter
        run: ruff format --check
        continue-on-error: true    # This line should be removed in real project!

      - name: Run Ruff linter
        run: ruff check
        continue-on-error: true    # This line should be removed in real project!

      - name: Run Pylint linter
        run: pylint ./
        continue-on-error: true    # This line should be removed in real project!

      - name: Run Flake8 linter
        run: flake8 ./
        continue-on-error: true    # This line should be removed in real project!

  test:
    runs-on: ubuntu-latest
    needs: [ lint ]
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   #v4.2.2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of SonarQube analysis

      - name: Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b   #v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install pytest coverage

      - name: Test with pytest
        run: pytest tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload test report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882   #v4.4.3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Check test coverage
        run: |
          coverage run -m pytest
          coverage xml -o coverage-${{ matrix.python-version }}.xml
        #   coverage xml

      - name: Upload test coverage report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882   #v4.4.3
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage-${{ matrix.python-version }}.xml
        #   path: coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@383f7e52eae3ab0510c3cb0e7d9d150bbaeab838   #v3.1.0
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.repository_owner }}_yefp1_backend_redis
            -Dsonar.python.version=${{ matrix.python-version }}
            -Dsonar.python.coverage.reportPaths=coverage*.xml
            -Dsonar.test.exclusions=tests/**
            -Dsonar.tests=tests/
            -Dsonar.verbose=false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build and Push Docker Image to AWS ECR
    needs: [ lint, test ]
    runs-on: ubuntu-latest
    environment: ${{ vars.ENVIRONMENT }}
    permissions:
      contents: read
      id-token: write       # For GitHub OIDC Token
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   #v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502   # v4.0.2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE }}
          role-session-name: yefp1-b2-e-${{ github.sha }}-${{ github.run_id}}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076   # v2.0.1

      - name: Build docker image
        id: docker_build
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75   #v6.9.0
        with:
          load: true
          push: false
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Install Dive
        run: |
          DIVE_VERSION=$(curl -sL "https://api.github.com/repos/wagoodman/dive/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -OL https://github.com/wagoodman/dive/releases/download/v${DIVE_VERSION}/dive_${DIVE_VERSION}_linux_amd64.deb
          sudo apt install ./dive_${DIVE_VERSION}_linux_amd64.deb

      - name: Check docker image size efficiency
        run: dive --ci --lowestEfficiency=0.9 --highestUserWastedPercent=0.15 "${IMAGE_TAG}"
        env:
          IMAGE_TAG: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Scan docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
        env:
          TRIVY_DB_REPOSITORY: ${{ env.TRIVY_DB_REPO }}

      - name: Scan docker image for vulnerabilities with Grype
        uses: anchore/scan-action@5ed195cc06065322983cae4bb31e2a751feb86fd # v5.2.0
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          output-format: table
          fail-build: true
          only-fixed: false
          severity-cutoff: medium

      - name: Push docker image
        id: docker_push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75   # v6.9.0
        with:
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          DOCKER_BUILD_RECORD_RETENTION_DAYS: 30

      - name: Install cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da   # v3.7.0

      - name: Sign the Docker images with GitHub OIDC Token
        run: cosign sign --key awskms:///${{ secrets.KEY_ALIAS_ARN }} --yes "${REPO_IMAGE}:${TAGS}@${DIGEST}"
        env:
          DIGEST: ${{ steps.docker_push.outputs.digest }}
          REPO_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
          TAGS: ${{ github.sha }}

  deploy:
    name: Deploy to AWS EC2
    needs: [ lint, test, build ]
    runs-on: ubuntu-latest
    environment: ${{ vars.ENVIRONMENT }}
    permissions:
      id-token: write  # GitHub OIDC Token
      contents: read
    steps:
      - name: Get AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502   # v4.0.2
        with:
          role-to-assume: ${{ secrets.CODE_DEPLOY_ROLE }}
          role-session-name: yefp1-b2-c-${{ github.sha }}-${{ github.run_id}}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for other ongoing deployment
        id: deployment_in_progress
        run: |
          deployments=$(aws deploy list-deployments --application-name ${{ env.APPLICATION_NAME }} --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} --region ${{ env.AWS_REGION }} --include-only-statuses "InProgress" --output json)
          count=$(echo $deployments | jq -r '.deployments | length')
          in_progress_deployment_id=$(echo $deployments | jq -r '.deployments[0]')
          echo count=$count >> "$GITHUB_OUTPUT"
          echo in_progress_deployment_id=$in_progress_deployment_id >> "$GITHUB_OUTPUT"
          echo count=$count
          echo in_progress_deployment_id=$in_progress_deployment_id

      - name: Wait for other ongoing deployment to finish
        if: steps.deployment_in_progress.outputs.count > 0
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.deployment_in_progress.outputs.in_progress_deployment_id }}

      - name: Create Deployment at AWS CodeDeploy
        id: codedeploy
        run: |
          deployment_id=$(aws deploy create-deployment --application-name ${{ env.APPLICATION_NAME }} --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} --github-location repository=$GITHUB_REPOSITORY,commitId=$GITHUB_SHA --ignore-application-stop-failures --query "deploymentId" --output text --no-paginate)
          echo deployment_id=$deployment_id >> "$GITHUB_OUTPUT"

      - name: Wait and verify whether the CodeDeploy deployment was successful
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.codedeploy.outputs.deployment_id }}

      - name: App server health check
        run: |
          NUMBER_OF_ATTEMPTS=10
          SLEEP_TIME=5
          for i in $(seq 1 $NUMBER_OF_ATTEMPTS);
          do
            HTTP_CODE=$(curl --insecure --write-out '%{http_code}' -o /dev/null -m 10 -q -s $HEALTH_CHECK_URL)
            if [ "$HTTP_CODE" == "200" ]; then
              echo "App server is running."
              exit 0
            fi
            echo "Attempt to curl endpoint returned HTTP Code $HTTP_CODE. Backing off and retrying."
            sleep $SLEEP_TIME
          done
          echo "App server did not respond after expected time. Failing."
          exit 1